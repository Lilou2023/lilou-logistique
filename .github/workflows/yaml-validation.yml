name: YAML Validation & Linting

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  yaml-validation:
    name: üîç Validation YAML
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python pour yamllint
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install yamllint
      run: |
        pip install yamllint
        
    - name: Install actionlint
      run: |
        echo "üì¶ Installation d'actionlint..."
        bash <(curl https://raw.githubusercontent.com/rhymond/actionlint/main/scripts/download-actionlint.bash)
        sudo mv actionlint /usr/local/bin/
        actionlint -version
        
    - name: Configure yamllint
      run: |
        echo "‚öôÔ∏è Configuration de yamllint..."
        cat > .yamllint.yml << 'EOF'
        extends: default
        
        rules:
          line-length:
            max: 120
            level: warning
          indentation:
            spaces: 2
          comments:
            min-spaces-from-content: 1
          comments-indentation: disable
          truthy:
            allowed-values: ['true', 'false', 'on', 'off']
          document-start: disable
          empty-lines:
            max-end: 1
        
        ignore: |
          node_modules/
          .git/
        EOF
        
    - name: Valider la syntaxe YAML avec yamllint
      run: |
        echo "üîç Validation YAML avec yamllint..."
        
        # Valider tous les fichiers YAML dans .github/workflows
        find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
          echo "üìÑ Validation de $file..."
          if yamllint "$file"; then
            echo "‚úÖ $file: Syntaxe YAML valide"
          else
            echo "‚ùå $file: Erreurs de syntaxe YAML d√©tect√©es"
            echo "::error file=$file::Erreurs de syntaxe YAML dans $file"
          fi
        done
        
    - name: Valider les workflows avec actionlint
      run: |
        echo "üîç Validation des workflows avec actionlint..."
        
        # Ex√©cuter actionlint sur tous les workflows
        if actionlint .github/workflows/*.yml; then
          echo "‚úÖ Tous les workflows sont valides selon actionlint"
        else
          echo "‚ùå Erreurs d√©tect√©es par actionlint"
          echo "::error::Erreurs de workflow d√©tect√©es par actionlint"
          exit 1
        fi
        
    - name: V√©rifications suppl√©mentaires
      run: |
        echo "üîç V√©rifications suppl√©mentaires..."
        
        # V√©rifier les caract√®res non-ASCII
        echo "üìù Recherche de caract√®res non-ASCII..."
        if find .github/workflows -name "*.yml" -exec grep -l '[^\x00-\x7F]' {} \; | head -5; then
          echo "‚ö†Ô∏è Caract√®res non-ASCII trouv√©s (peuvent causer des probl√®mes)"
        else
          echo "‚úÖ Aucun caract√®re non-ASCII probl√©matique"
        fi
        
        # V√©rifier les lignes trop longues
        echo "üìè V√©rification de la longueur des lignes..."
        find .github/workflows -name "*.yml" | while read -r file; do
          long_lines=$(awk 'length($0) > 120 { print NR ": " $0 }' "$file")
          if [ -n "$long_lines" ]; then
            echo "‚ö†Ô∏è Lignes longues dans $file:"
            echo "$long_lines"
          fi
        done
        
        # V√©rifier l'indentation
        echo "üìê V√©rification de l'indentation..."
        find .github/workflows -name "*.yml" | while read -r file; do
          if grep -n $'\t' "$file"; then
            echo "‚ö†Ô∏è Tabulations trouv√©es dans $file (utiliser des espaces)"
            echo "::warning file=$file::Tabulations d√©tect√©es, utiliser des espaces"
          fi
        done
        
    - name: G√©n√©rer un rapport de validation
      if: always()
      run: |
        echo "üìã G√©n√©ration du rapport de validation..."
        
        cat > yaml-validation-report.md << 'EOF'
        # üìä Rapport de Validation YAML
        
        **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit:** ${{ github.sha }}
        **Branche:** ${{ github.ref_name }}
        
        ## üîç Fichiers Valid√©s
        
        EOF
        
        echo "| Fichier | yamllint | actionlint | Taille |" >> yaml-validation-report.md
        echo "|---------|----------|------------|--------|" >> yaml-validation-report.md
        
        find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
          size=$(wc -c < "$file")
          echo "| \`$file\` | ‚úÖ | ‚úÖ | ${size} bytes |" >> yaml-validation-report.md
        done
        
        cat >> yaml-validation-report.md << 'EOF'
        
        ## üõ†Ô∏è Outils Utilis√©s
        
        - **yamllint**: Validation de la syntaxe YAML
        - **actionlint**: Validation sp√©cifique aux workflows GitHub Actions
        - **V√©rifications custom**: Caract√®res, indentation, longueur des lignes
        
        ## üí° Bonnes Pratiques
        
        1. **Indentation**: Utiliser 2 espaces (pas de tabulations)
        2. **Longueur des lignes**: Maximum 120 caract√®res
        3. **Encodage**: UTF-8 sans BOM
        4. **Actions**: Utiliser des versions stables (@v3)
        5. **Noms**: Utiliser des noms descriptifs pour les jobs et steps
        
        EOF
        
        echo "‚úÖ Rapport g√©n√©r√©: yaml-validation-report.md"
        
    - name: Upload du rapport
      uses: actions/upload-artifact@v4
      with:
        name: yaml-validation-report
        path: yaml-validation-report.md
        retention-days: 30
      if: always()

  workflow-security:
    name: üîí S√©curit√© des Workflows
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Analyser la s√©curit√© des workflows
      run: |
        echo "üîí Analyse de s√©curit√© des workflows..."
        
        # V√©rifier les secrets hardcod√©s
        echo "üîç Recherche de secrets potentiellement hardcod√©s..."
        secret_patterns=(
          "password"
          "secret"
          "token"
          "key"
          "api_key"
          "private"
        )
        
        secrets_found=false
        for pattern in "${secret_patterns[@]}"; do
          if find .github/workflows -name "*.yml" -exec grep -l -i "$pattern" {} \; | \
             xargs grep -v "secrets\." | grep -v "github\.token" | grep -v "description" | \
             grep -i "$pattern" >/dev/null; then
            echo "‚ö†Ô∏è Potentiel secret hardcod√© trouv√©: $pattern"
            secrets_found=true
          fi
        done
        
        if [ "$secrets_found" = false ]; then
          echo "‚úÖ Aucun secret hardcod√© √©vident d√©tect√©"
        fi
        
        # V√©rifier les permissions
        echo "üîç V√©rification des permissions..."
        if find .github/workflows -name "*.yml" -exec grep -l "permissions:" {} \; >/dev/null; then
          echo "‚úÖ Permissions explicites d√©finies dans certains workflows"
        else
          echo "‚ö†Ô∏è Aucune permission explicite d√©finie (utilise les permissions par d√©faut)"
        fi
        
        # V√©rifier l'utilisation de continue-on-error
        continue_count=$(find .github/workflows -name "*.yml" -exec grep -c "continue-on-error: true" {} \; | \
                        awk '{sum += $1} END {print sum}')
        echo "üìä Nombre d'√©tapes avec continue-on-error: $continue_count"
        
        if [ "$continue_count" -gt 20 ]; then
          echo "‚ö†Ô∏è Beaucoup d'√©tapes ignorent les erreurs - v√©rifiez si c'est intentionnel"
        else
          echo "‚úÖ Utilisation raisonnable de continue-on-error"
        fi
        
        # V√©rifier les actions tierces
        echo "üîç V√©rification des actions tierces..."
        third_party_actions=$(find .github/workflows -name "*.yml" -exec grep "uses:" {} \; | \
                             grep -v "actions/" | wc -l)
        echo "üìä Actions tierces utilis√©es: $third_party_actions"
        
        if [ "$third_party_actions" -gt 0 ]; then
          echo "‚ö†Ô∏è Actions tierces d√©tect√©es - v√©rifiez leur s√©curit√©"
          find .github/workflows -name "*.yml" -exec grep "uses:" {} \; | \
          grep -v "actions/" | sed 's/.*uses: */  - /'
        fi
