name: Workflow Testing & Validation

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Port√©e du test'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - syntax-only
        - actions-only
        - security-only
      target_workflow:
        description: 'Workflow sp√©cifique √† tester (optionnel)'
        required: false
        type: string
      dry_run:
        description: 'Ex√©cution √† blanc (simulation)'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  pre-test-validation:
    name: üîç Validation Pr√©-Test
    runs-on: ubuntu-latest
    
    outputs:
      workflows-to-test: ${{ steps.discover.outputs.workflows }}
      test-matrix: ${{ steps.matrix.outputs.matrix }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: D√©couvrir les workflows
      id: discover
      run: |
        echo "üîç D√©couverte des workflows √† tester..."
        
        if [ -n "${{ github.event.inputs.target_workflow }}" ]; then
          # Test d'un workflow sp√©cifique
          target="${{ github.event.inputs.target_workflow }}"
          if [ -f ".github/workflows/$target" ]; then
            echo "workflows=[\"$target\"]" >> $GITHUB_OUTPUT
            echo "üìÑ Workflow cible: $target"
          else
            echo "‚ùå Workflow $target introuvable"
            exit 1
          fi
        else
          # D√©couvrir tous les workflows
          workflows=$(find .github/workflows -name "*.yml" -o -name "*.yaml" | \
                     grep -v "workflow-testing.yml" | \
                     sed 's|.github/workflows/||' | \
                     jq -R -s -c 'split("\n")[:-1]')
          echo "workflows=$workflows" >> $GITHUB_OUTPUT
          echo "üìÑ Workflows d√©couverts:"
          echo "$workflows" | jq -r '.[]' | sed 's/^/  - /'
        fi
        
    - name: G√©n√©rer la matrice de test
      id: matrix
      run: |
        echo "üéØ G√©n√©ration de la matrice de test..."
        
        # Cr√©er la matrice bas√©e sur le scope
        case "${{ github.event.inputs.test_scope }}" in
          "syntax-only")
            matrix='{"include":[{"test":"syntax","tool":"yamllint"},{"test":"syntax","tool":"actionlint"}]}'
            ;;
          "actions-only")
            matrix='{"include":[{"test":"actions","tool":"version-check"}]}'
            ;;
          "security-only")
            matrix='{"include":[{"test":"security","tool":"secrets-scan"}]}'
            ;;
          *)
            matrix='{"include":[{"test":"syntax","tool":"yamllint"},{"test":"syntax","tool":"actionlint"},{"test":"actions","tool":"version-check"},{"test":"security","tool":"secrets-scan"}]}'
            ;;
        esac
        
        echo "matrix=$matrix" >> $GITHUB_OUTPUT
        echo "üìä Matrice de test:"
        echo "$matrix" | jq .

  syntax-testing:
    name: üîç Test Syntaxe - ${{ matrix.tool }}
    runs-on: ubuntu-latest
    needs: pre-test-validation
    if: contains(needs.pre-test-validation.outputs.test-matrix, 'syntax')
    strategy:
      matrix: ${{ fromJson(needs.pre-test-validation.outputs.test-matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup outils de validation
      run: |
        echo "üõ†Ô∏è Installation des outils de validation..."
        
        if [ "${{ matrix.tool }}" = "yamllint" ]; then
          pip install yamllint
        elif [ "${{ matrix.tool }}" = "actionlint" ]; then
          bash <(curl https://raw.githubusercontent.com/rhymond/actionlint/main/scripts/download-actionlint.bash)
          sudo mv actionlint /usr/local/bin/
        fi
        
    - name: Ex√©cuter les tests de syntaxe
      run: |
        echo "üß™ Test de syntaxe avec ${{ matrix.tool }}..."
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "üîÑ Mode simulation activ√©"
        fi
        
        case "${{ matrix.tool }}" in
          "yamllint")
            echo "üìù Configuration yamllint..."
            cat > .yamllint.yml << 'EOF'
        extends: default
        rules:
          line-length:
            max: 120
          indentation:
            spaces: 2
          truthy:
            allowed-values: ['true', 'false', 'on', 'off']
          document-start: disable
        EOF
            
            echo "üîç Validation yamllint..."
            for workflow in $(echo '${{ needs.pre-test-validation.outputs.workflows }}' | jq -r '.[]'); do
              echo "üìÑ Test de .github/workflows/$workflow"
              if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
                echo "  ‚úÖ [SIMULATION] Syntaxe YAML valide"
              else
                yamllint ".github/workflows/$workflow"
              fi
            done
            ;;
            
          "actionlint")
            echo "üîç Validation actionlint..."
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              echo "‚úÖ [SIMULATION] Workflows valides selon actionlint"
            else
              actionlint .github/workflows/*.yml
            fi
            ;;
        esac

  action-version-testing:
    name: üîÑ Test Versions Actions
    runs-on: ubuntu-latest
    needs: pre-test-validation
    if: contains(needs.pre-test-validation.outputs.test-matrix, 'actions')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Tester les versions d'actions
      run: |
        echo "üîÑ Test des versions d'actions..."
        
        # Extraire toutes les actions utilis√©es
        actions_file="actions_to_test.txt"
        find .github/workflows -name "*.yml" -exec grep -h "uses:" {} \; | \
        sed 's/.*uses: *//' | sed 's/ *#.*//' | sort | uniq > "$actions_file"
        
        echo "üìÑ Actions √† tester:"
        cat "$actions_file"
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "üîÑ Mode simulation - v√©rification des actions..."
          while read -r action; do
            if [ -n "$action" ]; then
              echo "  ‚úÖ [SIMULATION] $action - Disponible"
            fi
          done < "$actions_file"
        else
          # V√©rification r√©elle
          echo "üåê V√©rification r√©elle des actions..."
          unavailable=0
          
          while read -r action; do
            if [ -n "$action" ]; then
              repo="${action%@*}"
              version="${action#*@}"
              
              echo "üîç Test de $action..."
              if curl -s -f "https://api.github.com/repos/$repo" > /dev/null; then
                if [ "$version" != "$repo" ]; then
                  if curl -s -f "https://api.github.com/repos/$repo/git/refs/tags/$version" > /dev/null; then
                    echo "  ‚úÖ $action - Disponible"
                  else
                    echo "  ‚ùå $action - Version introuvable"
                    unavailable=$((unavailable + 1))
                  fi
                else
                  echo "  ‚úÖ $action - Repository disponible"
                fi
              else
                echo "  ‚ùå $action - Repository introuvable"
                unavailable=$((unavailable + 1))
              fi
            fi
          done < "$actions_file"
          
          if [ $unavailable -gt 0 ]; then
            echo "üö® $unavailable actions indisponibles d√©tect√©es"
            exit 1
          else
            echo "üéâ Toutes les actions sont disponibles"
          fi
        fi

  security-testing:
    name: üîí Test S√©curit√©
    runs-on: ubuntu-latest
    needs: pre-test-validation
    if: contains(needs.pre-test-validation.outputs.test-matrix, 'security')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Scanner la s√©curit√© des workflows
      run: |
        echo "üîí Scan de s√©curit√© des workflows..."
        
        security_issues=0
        
        # V√©rifier les secrets hardcod√©s
        echo "üîç Recherche de secrets hardcod√©s..."
        secret_patterns=("password" "secret" "token" "key" "api_key")
        
        for pattern in "${secret_patterns[@]}"; do
          if find .github/workflows -name "*.yml" -exec grep -l -i "$pattern" {} \; | \
             xargs grep -v "secrets\." | grep -v "github\.token" | grep -v "description" | \
             grep -i "$pattern" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Potentiel secret hardcod√©: $pattern"
            security_issues=$((security_issues + 1))
          fi
        done
        
        # V√©rifier les permissions
        echo "üîç V√©rification des permissions..."
        workflows_without_permissions=$(find .github/workflows -name "*.yml" -exec grep -L "permissions:" {} \; | wc -l)
        if [ "$workflows_without_permissions" -gt 0 ]; then
          echo "‚ö†Ô∏è $workflows_without_permissions workflows sans permissions explicites"
        fi
        
        # V√©rifier les actions tierces
        echo "üîç V√©rification des actions tierces..."
        third_party_count=$(find .github/workflows -name "*.yml" -exec grep "uses:" {} \; | \
                           grep -v "actions/" | wc -l)
        if [ "$third_party_count" -gt 0 ]; then
          echo "‚ö†Ô∏è $third_party_count actions tierces d√©tect√©es"
          echo "üìã Actions tierces:"
          find .github/workflows -name "*.yml" -exec grep "uses:" {} \; | \
          grep -v "actions/" | sed 's/.*uses: */  - /'
        fi
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "‚úÖ [SIMULATION] Scan de s√©curit√© termin√©"
        else
          if [ $security_issues -gt 0 ]; then
            echo "üö® $security_issues probl√®mes de s√©curit√© potentiels d√©tect√©s"
            echo "::warning::Probl√®mes de s√©curit√© potentiels dans les workflows"
          else
            echo "‚úÖ Aucun probl√®me de s√©curit√© √©vident d√©tect√©"
          fi
        fi

  integration-testing:
    name: üß™ Test d'Int√©gration
    runs-on: ubuntu-latest
    needs: [syntax-testing, action-version-testing, security-testing]
    if: always() && (needs.syntax-testing.result == 'success' || needs.syntax-testing.result == 'skipped') && (needs.action-version-testing.result == 'success' || needs.action-version-testing.result == 'skipped') && (needs.security-testing.result == 'success' || needs.security-testing.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Test d'int√©gration des workflows
      run: |
        echo "üß™ Test d'int√©gration des workflows..."
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "üîÑ Mode simulation - test d'int√©gration..."
          echo "‚úÖ [SIMULATION] Tous les workflows sont compatibles"
          echo "‚úÖ [SIMULATION] Aucun conflit de noms d√©tect√©"
          echo "‚úÖ [SIMULATION] D√©pendances entre jobs valid√©es"
        else
          echo "üîç V√©rification des conflits de noms de jobs..."
          job_conflicts=$(find .github/workflows -name "*.yml" -exec grep -h "^  [a-zA-Z].*:$" {} \; | \
                         sort | uniq -d | wc -l)
          
          if [ "$job_conflicts" -gt 0 ]; then
            echo "‚ö†Ô∏è Conflits de noms de jobs d√©tect√©s"
          else
            echo "‚úÖ Aucun conflit de noms de jobs"
          fi
          
          echo "üîç V√©rification de la coh√©rence des d√©clencheurs..."
          echo "‚úÖ Test d'int√©gration termin√©"
        fi

  test-report:
    name: üìã Rapport de Test
    runs-on: ubuntu-latest
    needs: [pre-test-validation, syntax-testing, action-version-testing, security-testing, integration-testing]
    if: always()
    
    steps:
    - name: G√©n√©rer le rapport de test
      run: |
        echo "üìã G√©n√©ration du rapport de test..."
        
        cat > workflow-test-report.md << 'EOF'
        # üß™ Rapport de Test des Workflows
        
        **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Port√©e:** ${{ github.event.inputs.test_scope }}
        **Mode:** ${{ github.event.inputs.dry_run == 'true' && 'Simulation' || 'R√©el' }}
        **D√©clench√© par:** ${{ github.actor }}
        
        ## üìä R√©sultats des Tests
        
        | Test | Statut | D√©tails |
        |------|--------|---------|
        EOF
        
        # Ajouter les r√©sultats
        tests=(
          "syntax-testing:Test Syntaxe"
          "action-version-testing:Test Versions Actions"
          "security-testing:Test S√©curit√©"
          "integration-testing:Test Int√©gration"
        )
        
        for test_info in "${tests[@]}"; do
          test_name="${test_info%%:*}"
          test_desc="${test_info##*:}"
          
          case "$test_name" in
            "syntax-testing")
              result="${{ needs.syntax-testing.result }}"
              ;;
            "action-version-testing")
              result="${{ needs.action-version-testing.result }}"
              ;;
            "security-testing")
              result="${{ needs.security-testing.result }}"
              ;;
            "integration-testing")
              result="${{ needs.integration-testing.result }}"
              ;;
          esac
          
          case "$result" in
            "success")
              echo "| $test_desc | ‚úÖ R√©ussi | Tous les tests pass√©s |" >> workflow-test-report.md
              ;;
            "failure")
              echo "| $test_desc | ‚ùå √âchec | Erreurs d√©tect√©es |" >> workflow-test-report.md
              ;;
            "skipped")
              echo "| $test_desc | ‚è≠Ô∏è Ignor√© | Non inclus dans la port√©e |" >> workflow-test-report.md
              ;;
            *)
              echo "| $test_desc | ‚ùì Inconnu | Statut non d√©termin√© |" >> workflow-test-report.md
              ;;
          esac
        done
        
        cat >> workflow-test-report.md << 'EOF'
        
        ## üí° Recommandations
        
        1. **Avant chaque modification** de workflow, ex√©cuter ce test
        2. **Utiliser le mode simulation** pour les tests rapides
        3. **Tester en mode r√©el** avant le merge vers main
        4. **V√©rifier les actions** sur GitHub Marketplace
        
        ## üîó Actions Suivantes
        
        - [ ] Corriger les erreurs d√©tect√©es
        - [ ] Re-tester apr√®s corrections
        - [ ] Valider en environnement de test
        - [ ] Merger les modifications
        
        EOF
        
        echo "‚úÖ Rapport g√©n√©r√©"
        
    - name: Upload du rapport
      uses: actions/upload-artifact@v4
      with:
        name: workflow-test-report
        path: workflow-test-report.md
        retention-days: 30
      if: always()
