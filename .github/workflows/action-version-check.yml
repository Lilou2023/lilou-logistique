name: Action Version Checker

on:
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type de v√©rification'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - specific
        - outdated
  schedule:
    # V√©rification hebdomadaire le lundi √† 9h
    - cron: '0 9 * * 1'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-action-versions:
    name: üîç V√©rifier les Versions d'Actions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies for API calls
      run: |
        npm install -g axios
        
    - name: Analyser les actions utilis√©es
      id: analyze-actions
      run: |
        echo "üîç Analyse des actions utilis√©es dans les workflows..."
        
        # Extraire toutes les actions utilis√©es
        echo "üìÑ Actions trouv√©es dans les workflows:"
        find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs grep -h "uses:" | \
        sed 's/.*uses: *//' | sed 's/ *#.*//' | sort | uniq > actions_used.txt
        
        while read -r action; do
          echo "  - $action"
        done < actions_used.txt
        
        echo "actions-count=$(wc -l < actions_used.txt)" >> $GITHUB_OUTPUT
        
    - name: V√©rifier la disponibilit√© des actions
      run: |
        echo "üåê V√©rification de la disponibilit√© sur GitHub Marketplace..."
        
        # Fonction pour v√©rifier une action
        check_action() {
          local action="$1"
          local repo="${action%@*}"
          local version="${action#*@}"
          
          echo "üîç V√©rification de $action..."
          
          # V√©rifier si l'action existe
          if curl -s -f "https://api.github.com/repos/$repo" > /dev/null; then
            echo "  ‚úÖ Repository $repo existe"
            
            # V√©rifier si la version/tag existe
            if [ "$version" != "$repo" ]; then
              if curl -s -f "https://api.github.com/repos/$repo/git/refs/tags/$version" > /dev/null; then
                echo "  ‚úÖ Version $version disponible"
                return 0
              else
                echo "  ‚ùå Version $version INTROUVABLE"
                return 1
              fi
            fi
          else
            echo "  ‚ùå Repository $repo INTROUVABLE"
            return 1
          fi
        }
        
        # V√©rifier chaque action
        unavailable_actions=()
        available_actions=()
        
        while read -r action; do
          if [ -n "$action" ]; then
            if check_action "$action"; then
              available_actions+=("$action")
            else
              unavailable_actions+=("$action")
            fi
          fi
        done < actions_used.txt
        
        echo ""
        echo "üìä R√âSUM√â DE LA V√âRIFICATION:"
        echo "‚úÖ Actions disponibles: ${#available_actions[@]}"
        echo "‚ùå Actions indisponibles: ${#unavailable_actions[@]}"
        
        if [ ${#unavailable_actions[@]} -gt 0 ]; then
          echo ""
          echo "üö® ACTIONS INDISPONIBLES D√âTECT√âES:"
          for action in "${unavailable_actions[@]}"; do
            echo "  ‚ùå $action"
          done
          
          echo ""
          echo "üîß ACTIONS CORRECTIVES RECOMMAND√âES:"
          echo "1. V√©rifier manuellement sur GitHub Marketplace"
          echo "2. Utiliser des versions stables connues (@v4)"
          echo "3. Mettre √† jour les workflows concern√©s"
          
          exit 1
        else
          echo "üéâ Toutes les actions sont disponibles !"
        fi
        
    - name: Sugg√©rer des mises √† jour
      if: success()
      run: |
        echo "üîÑ Recherche de versions plus r√©centes..."
        
        # Fonction pour obtenir le dernier tag
        get_latest_tag() {
          local repo="$1"
          curl -s "https://api.github.com/repos/$repo/tags?per_page=1" | \
          grep '"name":' | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/' || echo "unknown"
        }
        
        echo "üìà Suggestions de mise √† jour:"
        
        # Actions principales √† v√©rifier
        main_actions=(
          "actions/checkout"
          "actions/setup-node"
          "actions/upload-artifact"
          "actions/download-artifact"
        )
        
        for repo in "${main_actions[@]}"; do
          latest=$(get_latest_tag "$repo")
          if [ "$latest" != "unknown" ] && [ "$latest" != "null" ]; then
            echo "  üì¶ $repo: Derni√®re version disponible = $latest"
            if [[ "$latest" == v4* ]]; then
              echo "  üëâ Suggestion : utiliser @$latest"
            fi
          fi
        done
        
    - name: G√©n√©rer un rapport
      if: always()
      run: |
        echo "üìã G√©n√©ration du rapport de v√©rification..."
        
        cat > action-version-report.md << 'EOF'
        # üìä Rapport de V√©rification des Actions GitHub
        
        **Date de v√©rification:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Workflow:** Action Version Checker
        
        ## üîç Actions Analys√©es
        
        EOF
        
        echo "| Action | Status | Commentaire |" >> action-version-report.md
        echo "|--------|--------|-------------|" >> action-version-report.md
        
        while read -r action; do
          if [ -n "$action" ]; then
            echo "| \`$action\` | ‚úÖ V√©rifi√©e | Disponible |" >> action-version-report.md
          fi
        done < actions_used.txt
        
        cat >> action-version-report.md << 'EOF'
        
        ## üí° Recommandations
        
        1. **Toujours v√©rifier** la disponibilit√© avant d'utiliser une nouvelle version
        2. **Privil√©gier les versions stables** et largement adopt√©es
        3. **Tester les mises √† jour** sur une branche de d√©veloppement
        4. **Monitorer r√©guli√®rement** les nouvelles versions disponibles
        
        ## üîó Ressources
        
        - [GitHub Marketplace](https://github.com/marketplace/actions/)
        - [Actions Documentation](https://docs.github.com/en/actions)
        
        EOF
        
        echo "‚úÖ Rapport g√©n√©r√©: action-version-report.md"
        
    - name: Upload du rapport
      uses: actions/upload-artifact@v4
      with:
        name: action-version-report
        path: |
          action-version-report.md
          actions_used.txt
        retention-days: 30
      if: always()