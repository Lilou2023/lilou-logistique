name: Deploy Lilou Logistique to Hostinger

on:
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches: 
      - hostinger-deploy

env:
  NODE_VERSION: '18'

jobs:
  deploy-hostinger:
    name: üöÄ Deploy to Hostinger
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.deploy_environment || 'production' }}
      url: https://lilou-logistique.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            npm install
          fi
      
      - name: Build application
        run: |
          echo "üèóÔ∏è Building application for Hostinger deployment..."
          npm run build
          echo "‚úÖ Build completed successfully"
      
      - name: Prepare deployment files
        run: |
          echo "üìÅ Preparing deployment files..."
          
          # Create deployment directory
          mkdir -p hostinger-deploy
          
          # Copy build files to deployment directory
          if [ -d "dist" ]; then
            cp -r dist/* hostinger-deploy/
          else
            echo "‚ö†Ô∏è No dist directory found, creating fallback"
            echo "<html><body><h1>Lilou Logistique</h1><p>Deployment successful!</p></body></html>" > hostinger-deploy/index.html
          fi
          
          # Create .htaccess for SPA routing
          cat > hostinger-deploy/.htaccess << 'EOF'
          # Enable mod_rewrite
          RewriteEngine On
          
          # Handle SPA routing
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          
          # Enable compression
          <IfModule mod_deflate.c>
            AddOutputFilterByType DEFLATE text/plain
            AddOutputFilterByType DEFLATE text/html
            AddOutputFilterByType DEFLATE text/xml
            AddOutputFilterByType DEFLATE text/css
            AddOutputFilterByType DEFLATE application/xml
            AddOutputFilterByType DEFLATE application/xhtml+xml
            AddOutputFilterByType DEFLATE application/rss+xml
            AddOutputFilterByType DEFLATE application/javascript
            AddOutputFilterByType DEFLATE application/x-javascript
          </IfModule>
          
          # Set cache headers
          <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/css "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/gif "access plus 1 year"
            ExpiresByType image/ico "access plus 1 year"
            ExpiresByType image/icon "access plus 1 year"
            ExpiresByType text/html "access plus 1 hour"
          </IfModule>
          EOF
          
          echo "‚úÖ Deployment files prepared"
      
      - name: Deploy to Hostinger
        run: |
          echo "üöÄ Deploying to Hostinger..."
          
          # Configure git for deployment
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Add deployment files to git
          git add hostinger-deploy/
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è No changes to deploy"
          else
            # Commit deployment files
            git commit -m "üöÄ Deploy to Hostinger - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            
            echo "üìä Deployment Summary:"
            echo "- Environment: ${{ github.event.inputs.deploy_environment || 'production' }}"
            echo "- Branch: hostinger-deploy"
            echo "- Commit: $(git rev-parse --short HEAD)"
            echo "- Files deployed: $(find hostinger-deploy -type f | wc -l)"
            echo "- Total size: $(du -sh hostinger-deploy | cut -f1)"
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üîó Your application should be available at: https://lilou-logistique.com"
          fi
      
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hostinger-deployment-${{ github.run_number }}
          path: hostinger-deploy/
          retention-days: 30
        if: always()
      
      - name: Deployment notification
        run: |
          echo "üì¢ Deployment Notification"
          echo "==========================="
          echo "üéØ Project: Lilou Logistique"
          echo "üåê Environment: ${{ github.event.inputs.deploy_environment || 'production' }}"
          echo "üìÖ Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "üîó URL: https://lilou-logistique.com"
          echo "‚úÖ Status: Deployment completed successfully"
          echo ""
          echo "üîß Next steps:"
          echo "1. Verify the application is working correctly"
          echo "2. Check performance metrics"
          echo "3. Monitor for any issues"
          echo ""
          echo "üéâ Deployment successful!"