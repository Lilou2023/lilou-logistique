name: "üöÄ Deploy to Hostinger - Lilou Logistique"

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: "üöö Checkout code"
        uses: actions/checkout@v4

      - name: "‚öôÔ∏è Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: "üì¶ Install dependencies"
        run: npm ci

      - name: "üè† Build Next.js app"
        run: npm run build

      - name: Deploy to Hostinger
        env:
          HOSTINGER_USER: ${{ secrets.HOSTINGER_USER }}
          HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          scp -i key.pem -r dist/* $HOSTINGER_USER@$HOSTINGER_HOST:$HOSTINGER_PATH

      - name: "üßπ Clean up SSH key"
        run: rm -f key.pem

      - name: "üåê V√©rification du site"
        run: |
          sleep 15
          curl -f https://lilou-logistique.com

      - name: "üë∑Ô∏è Installer les d√©pendances sur Hostinger"
        env:
          HOSTINGER_USER: ${{ secrets.HOSTINGER_USER }}
          HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no $HOSTINGER_USER@$HOSTINGER_HOST "cd $HOSTINGER_PATH && npm install --production"

      - name: "üîÑ Red√©marrer l‚Äôapplication (PM2)"
        env:
          HOSTINGER_USER: ${{ secrets.HOSTINGER_USER }}
          HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no $HOSTINGER_USER@$HOSTINGER_HOST "cd $HOSTINGER_PATH && pm2 restart all"

# üöÄ D√©ploiement Automatique sur Hostinger

## Proc√©dure

1. **Ajout du workflow**
   Place le fichier `.github/workflows/deploy-hostinger.yml` dans le d√©p√¥t, puis‚ÄØ:
   ```bash
   git add .github/workflows/deploy-hostinger.yml
   git commit -m "feat: add Hostinger deploy workflow"
   git push origin main
   ```

2. **Configuration des secrets GitHub**
   Dans GitHub ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions, cr√©e‚ÄØ:
   - `HOSTINGER_USER` : utilisateur SSH
   - `HOSTINGER_HOST` : adresse/IP du serveur
   - `HOSTINGER_PATH` : chemin de d√©ploiement (ex. `/home/username/public_html/`)
   - `HOSTINGER_SSH_KEY` : cl√© priv√©e SSH

3. **Pr√©paration du serveur**
   - Node.js et PM2 doivent √™tre install√©s.
   - Le r√©pertoire cible doit exister.
   - La cl√© publique SSH doit √™tre autoris√©e.

4. **D√©clenchement et suivi**
   - Tout push sur `main` d√©clenche le d√©ploiement.
   - Pour forcer un d√©ploiement‚ÄØ:
     ```bash
     git commit --allow-empty -m "üöÄ trigger deploy"
     git push origin main
     ```
   - Surveille l‚Äôonglet **Actions** du d√©p√¥t.

5. **Validation**
   - V√©rifie la mise √† jour sur‚ÄØ: https://lilou-logistique.com

## En cas de probl√®me

- Consulte les logs GitHub Actions.
- V√©rifie la configuration SSH, Node.js, PM2, et le chemin de build.
- Adapte le script si besoin (autre process manager, autre dossier de build‚Ä¶).

---

Pour toute question ou adaptation, contacte [Ton pr√©nom] ou l‚Äô√©quipe technique.
