#!/bin/bash

# Script de d√©ploiement vers Hostinger
# Lilou Logistique - Hostinger Deployment Script

set -e

echo "üöÄ D√©ploiement vers Hostinger..."

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    echo "‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

# R√©cup√©rer la branche actuelle
CURRENT_BRANCH=$(git branch --show-current)
echo "üìç Branche actuelle: $CURRENT_BRANCH"

# V√©rifier si la branche hostinger-deploy existe
if git show-ref --verify --quiet refs/heads/hostinger-deploy; then
    echo "‚úÖ La branche hostinger-deploy existe"
else
    echo "üÜï Cr√©ation de la branche hostinger-deploy..."
    git checkout -b hostinger-deploy
    git checkout $CURRENT_BRANCH
fi

# Fonction pour d√©ployer
deploy_to_hostinger() {
    echo "üîÑ Passage √† la branche hostinger-deploy..."
    git checkout hostinger-deploy
    
    # Fusionner les derniers changements
    echo "üîÑ Fusion des changements depuis $CURRENT_BRANCH..."
    git merge $CURRENT_BRANCH --no-ff -m "merge: pr√©paration d√©ploiement Hostinger depuis $CURRENT_BRANCH"
    
    # Construire l'application
    echo "üèóÔ∏è Construction de l'application..."
    if npm run build; then
        echo "‚úÖ Build r√©ussi"
    else
        echo "‚ùå √âchec du build"
        git checkout $CURRENT_BRANCH
        exit 1
    fi
    
    # Pr√©parer les fichiers de d√©ploiement
    echo "üìÅ Pr√©paration des fichiers de d√©ploiement..."
    
    # Cr√©er le r√©pertoire de d√©ploiement s'il n'existe pas
    mkdir -p hostinger-deploy
    
    # Copier les fichiers de build
    if [ -d "dist" ]; then
        cp -r dist/* hostinger-deploy/
        echo "‚úÖ Fichiers de build copi√©s"
    else
        echo "‚ö†Ô∏è Aucun r√©pertoire dist trouv√©, cr√©ation d'un fallback"
        echo "<html><body><h1>Lilou Logistique</h1><p>D√©ploiement r√©ussi!</p></body></html>" > hostinger-deploy/index.html
    fi
    
    # Cr√©er le fichier .htaccess pour le SPA
    cat > hostinger-deploy/.htaccess << 'EOF'
# Enable mod_rewrite
RewriteEngine On

# Handle SPA routing
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.html [L]

# Enable compression
<IfModule mod_deflate.c>
  AddOutputFilterByType DEFLATE text/plain
  AddOutputFilterByType DEFLATE text/html
  AddOutputFilterByType DEFLATE text/xml
  AddOutputFilterByType DEFLATE text/css
  AddOutputFilterByType DEFLATE application/xml
  AddOutputFilterByType DEFLATE application/xhtml+xml
  AddOutputFilterByType DEFLATE application/rss+xml
  AddOutputFilterByType DEFLATE application/javascript
  AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>

# Set cache headers
<IfModule mod_expires.c>
  ExpiresActive On
  ExpiresByType text/css "access plus 1 year"
  ExpiresByType application/javascript "access plus 1 year"
  ExpiresByType image/png "access plus 1 year"
  ExpiresByType image/jpg "access plus 1 year"
  ExpiresByType image/jpeg "access plus 1 year"
  ExpiresByType image/gif "access plus 1 year"
  ExpiresByType image/ico "access plus 1 year"
  ExpiresByType image/icon "access plus 1 year"
  ExpiresByType text/html "access plus 1 hour"
</IfModule>
EOF
    
    echo "‚úÖ Fichier .htaccess cr√©√©"
    
    # Ajouter les fichiers de d√©ploiement au git
    git add hostinger-deploy/
    
    # V√©rifier s'il y a des changements √† commiter
    if git diff --cached --quiet; then
        echo "‚ÑπÔ∏è Aucun changement √† d√©ployer"
    else
        # Commiter les fichiers de d√©ploiement
        git commit -m "üöÄ D√©ploiement Hostinger - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        
        echo "üìä R√©sum√© du d√©ploiement:"
        echo "- Branche: hostinger-deploy"
        echo "- Commit: $(git rev-parse --short HEAD)"
        echo "- Fichiers d√©ploy√©s: $(find hostinger-deploy -type f | wc -l)"
        echo "- Taille totale: $(du -sh hostinger-deploy | cut -f1)"
        
        # Pousser vers le remote
        echo "‚¨ÜÔ∏è Push vers origin/hostinger-deploy..."
        git push origin hostinger-deploy
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Push vers hostinger-deploy r√©ussi!"
        else
            echo "‚ùå Erreur lors du push vers hostinger-deploy"
            git checkout $CURRENT_BRANCH
            exit 1
        fi
    fi
    
    # Retourner √† la branche originale
    git checkout $CURRENT_BRANCH
}

# Confirmation avant d√©ploiement
echo ""
echo "üîç V√©rification avant d√©ploiement:"
echo "- Projet: Lilou Logistique"
echo "- Branche source: $CURRENT_BRANCH"
echo "- Branche cible: hostinger-deploy"
echo "- Environnement: Hostinger"
echo ""

read -p "Continuer avec le d√©ploiement? (y/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    deploy_to_hostinger
    
    echo ""
    echo "üéâ D√©ploiement termin√©!"
    echo ""
    echo "üîó Actions suivantes:"
    echo "1. V√©rifier le d√©ploiement sur Hostinger"
    echo "2. Tester l'application sur l'environnement de production"
    echo "3. D√©clencher le workflow GitHub Actions si n√©cessaire:"
    echo "   gh workflow run 'Deploy Lilou Logistique to Hostinger'"
    echo ""
    echo "üìà URLs utiles:"
    echo "- Production: https://lilou-logistique.com"
    echo "- GitHub Actions: https://github.com/Lilou2023/lilou-logistique/actions"
    echo ""
else
    echo "‚ùå D√©ploiement annul√©"
    exit 1
fi