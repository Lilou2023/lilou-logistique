name: CI/CD Pipeline - Lilou Logistique

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test --if-present
      
      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            coverage/
          retention-days: 7

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Clean dist folder
        run: rm -rf dist
      
      - name: Build production
        run: npm run build --if-present
      
      - name: Prepare dist for deploy
        run: |
          if [ -d build ]; then
            mv build dist
          fi
          if [ ! -d dist ]; then
            mkdir -p dist
            echo "Build folder created"
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Setup Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Deploy to Vercel (staging)
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --confirm --cwd=dist
      
      - name: Verify staging deployment
        run: |
          sleep 15
          curl -f https://lilou-logistique-git-develop-lilou2023.vercel.app || echo "⚠️ Staging verification failed"

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Setup Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Deploy to Vercel (production)
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --confirm --cwd=dist
      
      - name: Deploy to Hostinger
        env:
          HOSTINGER_USER: ${{ secrets.HOSTINGER_USER }}
          HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          scp -i key.pem -o StrictHostKeyChecking=no -r dist/* $HOSTINGER_USER@$HOSTINGER_HOST:$HOSTINGER_PATH
          rm key.pem
      
      - name: Verify production deployment
        run: |
          sleep 15
          curl -f https://lilou-logistique.vercel.app || echo "⚠️ Vercel verification failed"
          curl -f https://lilou-logistique.com || echo "⚠️ Hostinger verification failed"